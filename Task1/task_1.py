# -*- coding: utf-8 -*-
"""Task-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hpn5xz6LuKFHZTuTgKA93oI_Od9ACnbI

# TSF GRIP Data Science and Business Analytics Internship
## Task 1
### M. Qasim Khan

# To do:
1. We will be making a linear regression model to predict a student's percentage achieved based on the number of hours studied by them. 

2. We will be loading data from a csv file and then carry out our operations on that data.

# Setup
"""

# Commented out IPython magic to ensure Python compatibility.
# First we will be importing the required libraries to perforn our task
# %matplotlib inline
from matplotlib import pyplot as plt # importing for data visualization
import numpy as np # for data processing
import pandas as pd # for data processing
import os # for creating a data directory
import urllib.request # for reading data from the link given

"""## Part 01 - Download Student Scores Dataset

We are using urllib to retrieve data from the given link and then create a folder which will store the csv file.
"""

# Link from where we will download the data
student_data = 'https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv'
# Path where we will save the data
save_path = os.path.join("Student_Scores_Data", "student_scores.csv")
# If folder doesn't exist create it.
if not os.path.isdir("Student_Scores_Data"):
  os.mkdir("Student_Scores_Data")
# If we have already save the file
if os.path.exists(save_path):
  print("File already exists")
else:
  try:
    urllib.request.urlretrieve(student_data, save_path)
    print(f"Student data added status: {os.path.exists(save_path)}")
  except:
    raise Exception(f"Something went wrong. Check your internet and download link.")

"""## Exploratory Data Analysis

After downloading the csv file, let's observe the data and try to understandÂ what it means.
"""

# Loading the dataset 
if not os.path.isdir("Student_Scores_Data"):
  os.mkdir("Student_Scores_Data")
StudentScoresCSV = os.path.join("Student_Scores_Data", "student_scores.csv")
StudentScoresDataset = pd.read_csv(StudentScoresCSV)
# View the top rows of the dataset
StudentScoresDataset.head(15)

# Now we will plot the distrinution of our scores to see what their relation is like
StudentScoresDataset.plot(x='Hours', y='Scores', style='o')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

"""Here we can see that the trend between **`Hours Studied`** and **`Percentage Score`** is a positive trend, meaning the percentage increases as the hours studied increases. """

# Extract only the relevant columns. X: Input, Y: Output
# iloc specifies the position of the column we want to select. :, part means all rows. ,-1 means last column
Y = StudentScoresDataset.iloc[:,-1].values 
X = StudentScoresDataset.iloc[:, :-1].values

"""## Part 02 - Train Test Split

To determine whether regression is effective, we can split our data into a training and test set and compare performance.
"""

from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, Y, 
                            test_size=0.2, random_state=0)

"""## Part 03 - Training the model

Here we will be training the model on the train sets we got from train test split
"""

from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(X_train, y_train) 

print("Training complete.")

"""Here now we will plot the regression line"""

# Plotting the regression line
line = regressor.coef_*X+regressor.intercept_
# Plotting for the test data
plt.scatter(X, Y)
plt.plot(X, line);
plt.show()

"""## Part 05 - Making Predictions"""

print(X_test) # Testing data - In Hours
y_pred = regressor.predict(X_test) # Predicting the scores

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df

# You can also test with your own data
hours = np.arange(1).reshape(1,-1)
hours[0][0]=9.25
print(hours)
own_pred = regressor.predict(hours)
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))

"""## Model Evaluation

#### Here we will compare the model used to see its effectivness
"""

from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(y_test, y_pred))